using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using CodeBeautify;


namespace WebApplication1.Controllers
{
    public class HomeController : Controller
    {
      /*  public ActionResult Index()
        {

            /*

                List<CustomerModel> customers = new List<CustomerModel>();
            string apiUrl = "http://localhost:26404/api/CustomerAPI";

            HttpClient client = new HttpClient();
            HttpResponseMessage response = client.GetAsync(apiUrl + string.Format("/GetCustomers?name={0}", name)).Result;
            if (response.IsSuccessStatusCode)
            {
                customers = (new JavaScriptSerializer()).Deserialize<List<CustomerModel>>(response.Content.ReadAsStringAsync().Result);
            }

            return customers;
             */

            /*
              var client = new HttpClient();
                 var request = new HttpRequestMessage
                 {
                     Method = HttpMethod.Get,
                     RequestUri = new Uri("https://reddit3.p.rapidapi.com/subreddit?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fwallstreetbets&filter=hot"),
                     Headers =
                     {
                         { "X-RapidAPI-Key", "16fc10ddf9mshef6d5e98e039c01p1011b6jsn83b29db0f933" },
                         { "X-RapidAPI-Host", "reddit3.p.rapidapi.com" },
                     },
                 };
                 using (var response = client.SendAsync(request))
                 {
                     response.EnsureSuccessStatusCode();

                 if (response.Status )
                 {
                 }
                     var body = response.Content.ReadAsStringAsync();
                     Console.WriteLine(body);
                 }
                 */

            ///////////////////////////////

          //  return View();
       // }
         

        public async Task<ActionResult> Index()
        {

            var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://reddit3.p.rapidapi.com/subreddit?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fflyfishing&filter=top"),
                Headers =
            {
                { "X-RapidAPI-Key", "16fc10ddf9mshef6d5e98e039c01p1011b6jsn83b29db0f933" },
                { "X-RapidAPI-Host", "reddit3.p.rapidapi.com" },
            },
                    };
            using (var response = await client.SendAsync(request))
            {
                response.EnsureSuccessStatusCode();
                var body = await response.Content.ReadAsStringAsync();
                var welcome7 = CodeBeautify.Welcome7.FromJson(body);
                return View(welcome7);
            }
            
        }

        public ActionResult About()
        {
            ViewBag.Message = "Application description page for Charlie's Fly Fishing.";

            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Contact page for Charlie's Fly Fishing.";

            return View();
        }

        public ActionResult ViewPage1()
        {
            ViewBag.Message = "View Page 1.";
            //test

            return View();
        }
    }
}
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    
//
//    var welcome7 = Welcome7.FromJson(jsonString);

namespace CodeBeautify
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome7
    {
        [JsonProperty("meta")]
        public Meta Meta { get; set; }

        [JsonProperty("posts")]
        public Post[] Posts { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }
    }

    public partial class Post
    {
        [JsonProperty("approved_at_utc")]
        public object ApprovedAtUtc { get; set; }

        [JsonProperty("subreddit")]
        public Subreddit Subreddit { get; set; }

        [JsonProperty("selftext")]
        public string Selftext { get; set; }

        [JsonProperty("user_reports")]
        public object[] UserReports { get; set; }

        [JsonProperty("saved")]
        public bool Saved { get; set; }

        [JsonProperty("mod_reason_title")]
        public object ModReasonTitle { get; set; }

        [JsonProperty("gilded")]
        public long Gilded { get; set; }

        [JsonProperty("clicked")]
        public bool Clicked { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("link_flair_richtext")]
        public object[] LinkFlairRichtext { get; set; }

        [JsonProperty("subreddit_name_prefixed")]
        public SubredditNamePrefixed SubredditNamePrefixed { get; set; }

        [JsonProperty("hidden")]
        public bool Hidden { get; set; }

        [JsonProperty("pwls")]
        public long Pwls { get; set; }

        //[JsonProperty("link_flair_css_class")]
        //public LinkFlairCssClass? LinkFlairCssClass { get; set; }

        [JsonProperty("downs")]
        public long Downs { get; set; }

        [JsonProperty("thumbnail_height")]
        public long? ThumbnailHeight { get; set; }

        [JsonProperty("top_awarded_type")]
        public object TopAwardedType { get; set; }

        [JsonProperty("parent_whitelist_status")]
        public WhitelistStatus ParentWhitelistStatus { get; set; }

        [JsonProperty("hide_score")]
        public bool HideScore { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("quarantine")]
        public bool Quarantine { get; set; }

        //[JsonProperty("link_flair_text_color")]
        //public LinkFlairTextColor LinkFlairTextColor { get; set; }

        [JsonProperty("upvote_ratio")]
        public double UpvoteRatio { get; set; }

        [JsonProperty("author_flair_background_color")]
        public object AuthorFlairBackgroundColor { get; set; }

        [JsonProperty("subreddit_type")]
        public SubredditType SubredditType { get; set; }

        [JsonProperty("ups")]
        public long Ups { get; set; }

        [JsonProperty("total_awards_received")]
        public long TotalAwardsReceived { get; set; }

        [JsonProperty("media_embed")]
        public object[] MediaEmbed { get; set; }

        [JsonProperty("thumbnail_width")]
        public long? ThumbnailWidth { get; set; }

        [JsonProperty("author_flair_template_id")]
        public object AuthorFlairTemplateId { get; set; }

        [JsonProperty("is_original_content")]
        public bool IsOriginalContent { get; set; }

        [JsonProperty("author_fullname")]
        public string AuthorFullname { get; set; }

        [JsonProperty("secure_media")]
        public object SecureMedia { get; set; }

        [JsonProperty("is_reddit_media_domain")]
        public bool IsRedditMediaDomain { get; set; }

        [JsonProperty("is_meta")]
        public bool IsMeta { get; set; }

        [JsonProperty("category")]
        public object Category { get; set; }

        [JsonProperty("secure_media_embed")]
        public object[] SecureMediaEmbed { get; set; }

        //[JsonProperty("link_flair_text")]
        //public LinkFlairText? LinkFlairText { get; set; }

        [JsonProperty("can_mod_post")]
        public bool CanModPost { get; set; }

        [JsonProperty("score")]
        public long Score { get; set; }

        [JsonProperty("approved_by")]
        public object ApprovedBy { get; set; }

        [JsonProperty("is_created_from_ads_ui")]
        public bool IsCreatedFromAdsUi { get; set; }

        [JsonProperty("author_premium")]
        public bool AuthorPremium { get; set; }

        [JsonProperty("thumbnail")]
        public ThumbnailUnion Thumbnail { get; set; }

        [JsonProperty("edited")]
        public bool Edited { get; set; }

        [JsonProperty("author_flair_css_class")]
        public object AuthorFlairCssClass { get; set; }

        [JsonProperty("author_flair_richtext")]
        public object[] AuthorFlairRichtext { get; set; }

        [JsonProperty("gildings")]
        public object[] Gildings { get; set; }

        [JsonProperty("post_hint", NullValueHandling = NullValueHandling.Ignore)]
        public string PostHint { get; set; }

        [JsonProperty("content_categories")]
        public object ContentCategories { get; set; }

        [JsonProperty("is_self")]
        public bool IsSelf { get; set; }

        [JsonProperty("mod_note")]
        public object ModNote { get; set; }

        [JsonProperty("created")]
        public long Created { get; set; }

        [JsonProperty("link_flair_type")]
        public FlairType LinkFlairType { get; set; }

        [JsonProperty("wls")]
        public long Wls { get; set; }

        [JsonProperty("removed_by_category")]
        public object RemovedByCategory { get; set; }

        [JsonProperty("banned_by")]
        public object BannedBy { get; set; }

        [JsonProperty("author_flair_type")]
        public FlairType AuthorFlairType { get; set; }

        [JsonProperty("domain")]
        public Domain Domain { get; set; }

        [JsonProperty("allow_live_comments")]
        public bool AllowLiveComments { get; set; }

        [JsonProperty("selftext_html")]
        public string SelftextHtml { get; set; }

        [JsonProperty("likes")]
        public object Likes { get; set; }

        [JsonProperty("suggested_sort")]
        public object SuggestedSort { get; set; }

        [JsonProperty("banned_at_utc")]
        public object BannedAtUtc { get; set; }

        [JsonProperty("url_overridden_by_dest", NullValueHandling = NullValueHandling.Ignore)]
        public Uri UrlOverriddenByDest { get; set; }

        [JsonProperty("view_count")]
        public object ViewCount { get; set; }

        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [JsonProperty("no_follow")]
        public bool NoFollow { get; set; }

        [JsonProperty("is_crosspostable")]
        public bool IsCrosspostable { get; set; }

        [JsonProperty("pinned")]
        public bool Pinned { get; set; }

        [JsonProperty("over_18")]
        public bool Over18 { get; set; }

        [JsonProperty("preview", NullValueHandling = NullValueHandling.Ignore)]
        public Preview Preview { get; set; }

        [JsonProperty("all_awardings")]
        public object[] AllAwardings { get; set; }

        [JsonProperty("awarders")]
        public object[] Awarders { get; set; }

        [JsonProperty("media_only")]
        public bool MediaOnly { get; set; }

        [JsonProperty("can_gild")]
        public bool CanGild { get; set; }

        [JsonProperty("spoiler")]
        public bool Spoiler { get; set; }

        [JsonProperty("locked")]
        public bool Locked { get; set; }

        [JsonProperty("author_flair_text")]
        public object AuthorFlairText { get; set; }

        [JsonProperty("treatment_tags")]
        public object[] TreatmentTags { get; set; }

        [JsonProperty("visited")]
        public bool Visited { get; set; }

        [JsonProperty("removed_by")]
        public object RemovedBy { get; set; }

        [JsonProperty("num_reports")]
        public object NumReports { get; set; }

        [JsonProperty("distinguished")]
        public object Distinguished { get; set; }

        [JsonProperty("subreddit_id")]
        public SubredditId SubredditId { get; set; }

        [JsonProperty("author_is_blocked")]
        public bool AuthorIsBlocked { get; set; }

        [JsonProperty("mod_reason_by")]
        public object ModReasonBy { get; set; }

        [JsonProperty("removal_reason")]
        public object RemovalReason { get; set; }

        [JsonProperty("link_flair_background_color")]
        public string LinkFlairBackgroundColor { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("is_robot_indexable")]
        public bool IsRobotIndexable { get; set; }

        [JsonProperty("report_reasons")]
        public object ReportReasons { get; set; }

        [JsonProperty("author")]
        public string Author { get; set; }

        [JsonProperty("discussion_type")]
        public object DiscussionType { get; set; }

        [JsonProperty("num_comments")]
        public long NumComments { get; set; }

        [JsonProperty("send_replies")]
        public bool SendReplies { get; set; }

        [JsonProperty("media")]
        public object Media { get; set; }

        [JsonProperty("contest_mode")]
        public bool ContestMode { get; set; }

        [JsonProperty("author_patreon_flair")]
        public bool AuthorPatreonFlair { get; set; }

        [JsonProperty("author_flair_text_color")]
        public object AuthorFlairTextColor { get; set; }

        [JsonProperty("permalink")]
        public string Permalink { get; set; }

        [JsonProperty("whitelist_status")]
        public WhitelistStatus WhitelistStatus { get; set; }

        [JsonProperty("stickied")]
        public bool Stickied { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("subreddit_subscribers")]
        public long SubredditSubscribers { get; set; }

        [JsonProperty("created_utc")]
        public long CreatedUtc { get; set; }

        [JsonProperty("num_crossposts")]
        public long NumCrossposts { get; set; }

        [JsonProperty("mod_reports")]
        public object[] ModReports { get; set; }

        [JsonProperty("is_video")]
        public bool IsVideo { get; set; }

        [JsonProperty("is_gallery", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsGallery { get; set; }

        [JsonProperty("media_metadata", NullValueHandling = NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, MediaMetadatum> MediaMetadata { get; set; }

        [JsonProperty("gallery_data", NullValueHandling = NullValueHandling.Ignore)]
        public GalleryData GalleryData { get; set; }
    }

    public partial class GalleryData
    {
        [JsonProperty("items")]
        public Item[] Items { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("media_id")]
        public string MediaId { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("caption", NullValueHandling = NullValueHandling.Ignore)]
        public string Caption { get; set; }
    }

    public partial class MediaMetadatum
    {
        [JsonProperty("status")]
        public Status Status { get; set; }

        [JsonProperty("e")]
        public E E { get; set; }

        [JsonProperty("m")]
        public M M { get; set; }

        [JsonProperty("p")]
        public S[] P { get; set; }

        [JsonProperty("s")]
        public S S { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class S
    {
        [JsonProperty("y")]
        public long Y { get; set; }

        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("u")]
        public Uri U { get; set; }
    }

    public partial class Preview
    {
        [JsonProperty("images")]
        public Image[] Images { get; set; }

        [JsonProperty("enabled")]
        public bool Enabled { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("source")]
        public Source Source { get; set; }

        [JsonProperty("resolutions")]
        public Source[] Resolutions { get; set; }

        [JsonProperty("variants")]
        public object[] Variants { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class Source
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }
    }

    public enum FlairType { Text };

    public enum Domain { IReddIt, RedditCom, SelfFlyfishing };

    public enum LinkFlairCssClass { Discussion };

    public enum LinkFlairText { Discussion };

    public enum LinkFlairTextColor { Dark };

    public enum E { Image };

    public enum M { ImageJpg };

    public enum Status { Valid };

    public enum WhitelistStatus { AllAds };

    public enum Subreddit { Flyfishing };

    public enum SubredditId { T52Qoeg };

    public enum SubredditNamePrefixed { RFlyfishing };

    public enum SubredditType { Public };

    public enum ThumbnailEnum { Self };

    public partial struct ThumbnailUnion
    {
        public ThumbnailEnum? Enum;
        public Uri PurpleUri;

        public static implicit operator ThumbnailUnion(ThumbnailEnum Enum) => new ThumbnailUnion { Enum = Enum };
        public static implicit operator ThumbnailUnion(Uri PurpleUri) => new ThumbnailUnion { PurpleUri = PurpleUri };
    }

    public partial class Welcome7
    {
        public static Welcome7 FromJson(string json) => JsonConvert.DeserializeObject<Welcome7>(json, CodeBeautify.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome7 self) => JsonConvert.SerializeObject(self, CodeBeautify.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                FlairTypeConverter.Singleton,
                DomainConverter.Singleton,
                //LinkFlairCssClassConverter.Singleton,
                //LinkFlairTextConverter.Singleton,
                //LinkFlairTextColorConverter.Singleton,
                EConverter.Singleton,
                MConverter.Singleton,
                StatusConverter.Singleton,
                WhitelistStatusConverter.Singleton,
                SubredditConverter.Singleton,
                SubredditIdConverter.Singleton,
                SubredditNamePrefixedConverter.Singleton,
                SubredditTypeConverter.Singleton,
                ThumbnailUnionConverter.Singleton,
                ThumbnailEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class FlairTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FlairType) || t == typeof(FlairType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "text")
            {
                return FlairType.Text;
            }
            throw new Exception("Cannot unmarshal type FlairType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FlairType)untypedValue;
            if (value == FlairType.Text)
            {
                serializer.Serialize(writer, "text");
                return;
            }
            throw new Exception("Cannot marshal type FlairType");
        }

        public static readonly FlairTypeConverter Singleton = new FlairTypeConverter();
    }

    internal class DomainConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Domain) || t == typeof(Domain?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "i.redd.it":
                    return Domain.IReddIt;
                case "reddit.com":
                    return Domain.RedditCom;
                case "self.flyfishing":
                    return Domain.SelfFlyfishing;
            }
            //throw new Exception("Cannot unmarshal type Domain");
            return Domain.SelfFlyfishing;
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Domain)untypedValue;
            switch (value)
            {
                case Domain.IReddIt:
                    serializer.Serialize(writer, "i.redd.it");
                    return;
                case Domain.RedditCom:
                    serializer.Serialize(writer, "reddit.com");
                    return;
                case Domain.SelfFlyfishing:
                    serializer.Serialize(writer, "self.flyfishing");
                    return;
            }
            throw new Exception("Cannot marshal type Domain");
        }

        public static readonly DomainConverter Singleton = new DomainConverter();
    }

    internal class LinkFlairCssClassConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LinkFlairCssClass) || t == typeof(LinkFlairCssClass?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "discussion")
            {
                return LinkFlairCssClass.Discussion;
            }
            throw new Exception("Cannot unmarshal type LinkFlairCssClass");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LinkFlairCssClass)untypedValue;
            if (value == LinkFlairCssClass.Discussion)
            {
                serializer.Serialize(writer, "discussion");
                return;
            }
            throw new Exception("Cannot marshal type LinkFlairCssClass");
        }

       // public static readonly LinkFlairCssClassConverter Singleton = new LinkFlairCssClassConverter();
    }

    internal class LinkFlairTextConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LinkFlairText) || t == typeof(LinkFlairText?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Discussion")
            {
                return LinkFlairText.Discussion;
            }
            throw new Exception("Cannot unmarshal type LinkFlairText");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LinkFlairText)untypedValue;
            if (value == LinkFlairText.Discussion)
            {
                serializer.Serialize(writer, "Discussion");
                return;
            }
            throw new Exception("Cannot marshal type LinkFlairText");
        }

        //public static readonly LinkFlairTextConverter Singleton = new LinkFlairTextConverter();
    }

    internal class LinkFlairTextColorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LinkFlairTextColor) || t == typeof(LinkFlairTextColor?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "dark")
            {
                return LinkFlairTextColor.Dark;
            }
            throw new Exception("Cannot unmarshal type LinkFlairTextColor");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LinkFlairTextColor)untypedValue;
            if (value == LinkFlairTextColor.Dark)
            {
                serializer.Serialize(writer, "dark");
                return;
            }
            throw new Exception("Cannot marshal type LinkFlairTextColor");
        }

        public static readonly LinkFlairTextColorConverter Singleton = new LinkFlairTextColorConverter();
    }

    internal class EConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(E) || t == typeof(E?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Image")
            {
                return E.Image;
            }
            throw new Exception("Cannot unmarshal type E");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (E)untypedValue;
            if (value == E.Image)
            {
                serializer.Serialize(writer, "Image");
                return;
            }
            throw new Exception("Cannot marshal type E");
        }

        public static readonly EConverter Singleton = new EConverter();
    }

    internal class MConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(M) || t == typeof(M?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "image/jpg" || value == "image/png" || value == "image/gif")
            {
                return M.ImageJpg;
            }
            throw new Exception("Cannot unmarshal type M");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (M)untypedValue;
            if (value == M.ImageJpg)
            {
                serializer.Serialize(writer, "image/jpg");
                return;
            }
            throw new Exception("Cannot marshal type M");
        }

        public static readonly MConverter Singleton = new MConverter();
    }

    internal class StatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Status) || t == typeof(Status?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "valid")
            {
                return Status.Valid;
            }
            throw new Exception("Cannot unmarshal type Status");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Status)untypedValue;
            if (value == Status.Valid)
            {
                serializer.Serialize(writer, "valid");
                return;
            }
            throw new Exception("Cannot marshal type Status");
        }

        public static readonly StatusConverter Singleton = new StatusConverter();
    }

    internal class WhitelistStatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WhitelistStatus) || t == typeof(WhitelistStatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "all_ads")
            {
                return WhitelistStatus.AllAds;
            }
            throw new Exception("Cannot unmarshal type WhitelistStatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WhitelistStatus)untypedValue;
            if (value == WhitelistStatus.AllAds)
            {
                serializer.Serialize(writer, "all_ads");
                return;
            }
            throw new Exception("Cannot marshal type WhitelistStatus");
        }

        public static readonly WhitelistStatusConverter Singleton = new WhitelistStatusConverter();
    }

    internal class SubredditConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Subreddit) || t == typeof(Subreddit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "flyfishing")
            {
                return Subreddit.Flyfishing;
            }
            throw new Exception("Cannot unmarshal type Subreddit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Subreddit)untypedValue;
            if (value == Subreddit.Flyfishing)
            {
                serializer.Serialize(writer, "flyfishing");
                return;
            }
            throw new Exception("Cannot marshal type Subreddit");
        }

        public static readonly SubredditConverter Singleton = new SubredditConverter();
    }

    internal class SubredditIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SubredditId) || t == typeof(SubredditId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "t5_2qoeg")
            {
                return SubredditId.T52Qoeg;
            }
            throw new Exception("Cannot unmarshal type SubredditId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SubredditId)untypedValue;
            if (value == SubredditId.T52Qoeg)
            {
                serializer.Serialize(writer, "t5_2qoeg");
                return;
            }
            throw new Exception("Cannot marshal type SubredditId");
        }

        public static readonly SubredditIdConverter Singleton = new SubredditIdConverter();
    }

    internal class SubredditNamePrefixedConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SubredditNamePrefixed) || t == typeof(SubredditNamePrefixed?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "r/flyfishing")
            {
                return SubredditNamePrefixed.RFlyfishing;
            }
            throw new Exception("Cannot unmarshal type SubredditNamePrefixed");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SubredditNamePrefixed)untypedValue;
            if (value == SubredditNamePrefixed.RFlyfishing)
            {
                serializer.Serialize(writer, "r/flyfishing");
                return;
            }
            throw new Exception("Cannot marshal type SubredditNamePrefixed");
        }

        public static readonly SubredditNamePrefixedConverter Singleton = new SubredditNamePrefixedConverter();
    }

    internal class SubredditTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SubredditType) || t == typeof(SubredditType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "public")
            {
                return SubredditType.Public;
            }
            throw new Exception("Cannot unmarshal type SubredditType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SubredditType)untypedValue;
            if (value == SubredditType.Public)
            {
                serializer.Serialize(writer, "public");
                return;
            }
            throw new Exception("Cannot marshal type SubredditType");
        }

        public static readonly SubredditTypeConverter Singleton = new SubredditTypeConverter();
    }

    internal class ThumbnailUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ThumbnailUnion) || t == typeof(ThumbnailUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    if (stringValue == "self")
                    {
                        return new ThumbnailUnion { Enum = ThumbnailEnum.Self };
                    }
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new ThumbnailUnion { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
            }
            throw new Exception("Cannot unmarshal type ThumbnailUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ThumbnailUnion)untypedValue;
            if (value.Enum != null)
            {
                if (value.Enum == ThumbnailEnum.Self)
                {
                    serializer.Serialize(writer, "self");
                    return;
                }
            }
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ThumbnailUnion");
        }

        public static readonly ThumbnailUnionConverter Singleton = new ThumbnailUnionConverter();
    }

    internal class ThumbnailEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ThumbnailEnum) || t == typeof(ThumbnailEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "self")
            {
                return ThumbnailEnum.Self;
            }
            throw new Exception("Cannot unmarshal type ThumbnailEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ThumbnailEnum)untypedValue;
            if (value == ThumbnailEnum.Self)
            {
                serializer.Serialize(writer, "self");
                return;
            }
            throw new Exception("Cannot marshal type ThumbnailEnum");
        }

        public static readonly ThumbnailEnumConverter Singleton = new ThumbnailEnumConverter();
    }
}
